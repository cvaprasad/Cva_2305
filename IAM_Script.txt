


What is IAM?
- IAM stands for Identity and Access Management
	IAM is used to control
		Identity – who can use your AWS resources (authentication)
		Access – what resources they can use and in what ways (authorization)
- IAM is a web services that enable you to manage users and group permissions in AWS
- It is targeted at organizations with multiple users or systems that use AWS products such as Amazon Elastic Compute Cloud, Amazon Relational Database Service, 
and the AWS Management Console.

Why we go for IAM?
- To avoid a security and logistical headache
- When you create an AWS account, it has permissions to do anything and everything with all the resources 
- IAM Allows you to limit access as needed and gives you the peace of mind that approved people are accessing the right
resources in the desired manner.
- IAM will allow us to create multiple users with individual security credentials and permissions, 
with this IAM, each user is allowed to do only what they need to do.
- Each user in the AWS account must have a unique set of credentials to access the console.

Free to use
	-IAM is offered at no additional charge and charges are applied only for use of other AWS products by your IAM users.

Account Root User
	-IAM Best Practice – Do not use or share the Root account once the AWS account is created, instead create a separate user with admin privilege
	-An Administrator account can be created for all the activities which too has full access to the AWS account except the accounts security credentials, 
		billing information and ability to change password

IAM Users
	-Password to access AWS services through AWS Management Console
	-Access Key/Secret Access Key to access AWS services through API, CLI or SDK
	-IAM user starts with no permissions and is not authorized to perform any AWS actions on any AWS 
	resources and should be granted permissions as per the job function requirement


Different types of users have different set of permissions:
- Administrators
- System Operators
- Developers

- Administrators need to access all AWS resources like S3, EC2, ELB, AWS RDS, etc.
- Developers need only access on Amazon Elastic Compute Cloud.

In that case, we can use IAM to create a unique user for each employee and define their permissions.


What is a Group ?
- A group is a collection of IAM users
- After you set permissions on a group, those permissions are set to all users in the group
- Even if we create user, we need to use groups to set permissions.
- We need to manage access for number if groups instead of managing access for every individual user.
- We can,
1. Create a Group
2. Review the Group
3. Attach policy
4. Change the Group name
5. Delete a Group
6.  Adding User to the Group


Multi-Factor Authentication, or MFA:-
- MFA provides additional security by requiring users to use a password and an authentication code from an external device.
	-If the MFA device stops working or is lost, you won’t be able to login into the AWS console and would need to reach out to AWS support to deactivate MFA
- MFA is especially recommended for the AWS root accounts and account with administrator permissions since they have access to all your AWS resources.


Credential Report
	-IAM allows you to generate and download a credential report that lists all users in the account and the status of their various credentials, including passwords, access keys, and MFA devices


Two types:
1. Hardware MFA device [Like your RSA tocken]
2. Virtual MFA device

Important to Note in IAM:
- Its not region specific.
- The created Roles, Users, policies, groups etc are Universal, thus can be used across the regions.

 

	*IAM Access Management is all about Permissions and Policies
	*IAM Policy is defined in the JSON (JavaScript Object Notation) format
	*IAM policy basically states “Principal A is allowed or denied (effect) to 
	perform Action B on Resource C given Conditions D are satisfied

A simple JASON Script
===================
{
    “Version”: “2012-10-17”,
    “Statement”: {
       “Principal“: {“AWS”: [“arn:aws:iam::ACCOUNT-ID-WITHOUT-HYPHENS:root”]},
       “Action“: “s3:ListBucket”,
       “Effect“: “Allow”,
       “Resource“: “arn:aws:s3:::example_bucket”,
       “Condition“: {“StringLike”: {
           “s3:prefix”: [ “home/${aws:username}/” ]
              }
          }
    }
======================

IAM Simulator Link:

	*IAM Policy Simulator helps test and troubleshoot IAM and resource-based policies
	*Test the policies with selected services, actions, and resources

		https://policysim.aws.amazon.com/home/index.jsp#groups   -> Use this link to test JASON scrpting and how its actions are performed on AWS Resources


	->Identity-Based vs Resource-Based Permissions

Identity-based, or IAM permissions
	*Identity-based, or IAM permissions are attached to an IAM user, group, or 
	role and specify what the user, group or role can do
	*IAM permissions can be applied to almost all the AWS services

Resource-based permissions
	*Resource-based permissions are attached to a resource for e.g. S3, SNS 
	*Resource-based permissions are supported only by some AWS services

Types of Managed policies
	AWS managed policies
		*Managed policies that are created and managed by AWS
		*AWS takes care of not breaking the policies for e.g. adding an restriction of removal of permission
		*Managed policies cannot be modified

	Customer managed policies
		*Managed policies are standalone and custom policies created and administered by you
		*Customer managed policies allows more precise control over the policies than when using AWS managed policies.

In-line policy
	Created for a user and a policy which is restricted only for that user

Note

AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms 
(Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide a convenient way to create programmatic access to IAM and AWS. 
For example, the SDKs take care of tasks such as cryptographically signing requests (see below), managing errors, and retrying requests automatically. For information about the AWS SDKs, 
including how to download and install them, see the Tools for Amazon Web Services page.




Interview Questions

Which service enables AWS customers to manage users and permissions in AWS?	(IAM)
Every user you create in the IAM system starts with ________			No permissions
Groups can’t _____.								be nested at all

There is also a limit to the number of users who can be associated within your AWS account — 
which is currently set to 500 Users.

When associating Users with a Group, there is an upper limit of 10 groups per User. 
You are also limited to 100 groups per AWS account 
— so be sure to plan your access carefully